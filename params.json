{"name":"Lsbasi","tagline":"Let's Build A Simple Interpreter","body":"#Check your understanding\r\n\r\n**Part 1**\r\n\r\n1. What is an interpreter?  \r\nA translator that processes and executes a source program without translating it into machine language first.\r\n\r\n2. What is a compiler?  \r\nA translator that translates a source program into machine language.\r\n\r\n3. What’s the difference between an interpreter and a compiler?  \r\nAn interpreter directly processes the source code while a compiler preprocesses the source code into machine language which has to then be processed to be executed on a machine.\r\n\r\n4. What is a token?  \r\nAn object that has a type and value\r\n\r\n5. What is the name of the process that breaks input apart into tokens?  \r\nLexical analysis\r\n\r\n6. What is the part of the interpreter that does lexical analysis called?  \r\nLexical analyzer or lexer\r\n\r\n7. What are the other common names for that part of an interpreter or a compiler?  \r\nScanner or tokenizer\r\n\r\n**Part 2**\r\n\r\n1. What is a lexeme?  \r\nA sequence of characters that form a token.\r\n\r\n2. What is the name of the process that finds the structure in the stream of tokens, or put differently, what is the name of the process that recognizes a certain phrase in that stream of tokens?  \r\nParsing\r\n\r\n3. What is the name of the part of the interpreter (compiler) that does parsing?  \r\nParser\r\n\r\n**Part 3**\r\n\r\n1. What is a syntax diagram?  \r\nA graphical representation of a programming language's syntax rules\r\n\r\n2. What is syntax analysis?  \r\nThe process of recognizing a phrase in a stream of tokens\r\n\r\n3. What is a syntax analyzer?  \r\nThe part of an interpreter, or compiler, that performs syntax analysis\r\n\r\n4. Draw a syntax diagram for arithmetic expressions that contain only multiplication and division, for example “7 * 4 / 2 * 3”\r\n\r\n![Syntax diagram for multiplication and division](http://i.imgur.com/VbOQevz.jpg)\r\n\r\n**Part 4**\r\n\r\nKeeping in mind the grammar from today’s article, answer the following questions, referring to the picture below as needed:\r\n\r\nexpr   : factor ( ( MULT | DIV ) factor ) *  \r\nfactor : INTEGER \r\n\r\n1. What is a context-free grammar (grammar)?  \r\nA widely used notation for specifying the syntax of a programming language\r\n\r\n2. How many rules / productions does the grammar have?  \r\nTwo rules\r\n\r\n3. What is a terminal? (Identify all terminals in the picture)  \r\nTokens like MUL, DIV, and INTEGER\r\n\r\n4. What is a non-terminal? (Identify all non-terminals in the picture)  \r\nVariables like _expr_ and _factor_\r\n\r\n5. What is a head of a rule? (Identify all heads / left-hand sides in the picture)  \r\nNon-terminal on the left-hand side of the colon, e.g. _expr_ and _factor_\r\n\r\n6. What is a body of the rule? (Identify all bodies / right-hand sides in the picture)  \r\nA sequence of terminals, and/or non-terminals on the right-hand side of the colon, e.g. factor ( ( MULT | DIV ) factor ) * and INTEGER\r\n\r\n7. What is the start symbol of a grammar?  \r\nThe non-terminal symbol on the left side of the first rule\r\n\r\n8. Write a grammar that describes arithmetic expressions containing any number of +, -, \\*, or / operators  \r\nexpr   : term ( ( ADD | SUB ) term ) \\*  \r\nterm   : factor ( ( MULT | DIV ) factor ) \\*  \r\nfactor : INTEGER\r\n\r\n**Part5**\r\n1. What does it mean for an operator to be _left-associative_?  \r\nWhen an operand like 3 in the expression 7 + 3 + 1 has plus signs on both sides, we need a convention to decide which operator applies to 3. Is it the one to the left or the one to the right of the operand 3? The operator + _associates_ to the left because an operand that has plus signs on both sides belongs to the operator to its left and so we say that the operator + is _left-associative_. That’s why 7 + 3 + 1 is equivalent to (7 + 3) + 1 by the _associativity_ convention.\r\n\r\n2. Are operators + and - _left-associative_ or _right-associative_? What about * and / ?  \r\nThey are all left-associative\r\n\r\n3. Does operator + have _higher precedence_ than operator * ?  \r\nNo","google":"UA-58873868-2","note":"Don't delete this file! It's used internally to help with page regeneration."}